<?php

// Full file path to the current installation's settings.php file
define('WF_OBJECTS_PER_PAGE', 100);

// Maximum number of objects returned for a Solr lookup.
define('UPITT_WORKFLOW_SOLR_LIMIT', 10000);

// Permissions.
define('ISLANDORA_WORKFLOW_MANAGE', 'manage upitt workflow');
define('ISLANDORA_WORKFLOW_MANAGE_LOOKUPTABLES', 'manage upitt workflow lookup tables');

// Constants for various workflow actions (transactions)
define('UPITT_WORKFLOW_ACTION_INGESTED_COMPLETELY', 3); // ingest completed


/**
 * Implements hook_menu().
 */
function upitt_workflow_menu() {
  $menu = array(
    'admin/islandora/workflow' => array(
      'title' => 'University of Pittsburgh Workflow',
      'description' => 'Change the settings for workflow folders, etc.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_admin_form'),
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
      'file' => 'includes/admin.form.inc',
    ),
    'workflow/testftp' => array(
      'title' => 'test ftp',
      'page callback' => array('upitt_workflow_test_ftp'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/test.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow' => array(
      'title' => t('Workflow'),
      'page callback' => array('upitt_workflow_legacy_objects'), // upitt_workflow_objects'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/legacy.report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/object/%' => array(
      'title' => t('Workflow Report | Status and Files'),
      'page callback' => array('upitt_workflow_legacy_objectreport_form'), // upitt_workflow_objectreport_form'),
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    // depricated instance of workflow page
/*    'workflow_legacy' => array(
      'title' => t('Workflow (legacy)'),
      'page callback' => array('upitt_workflow_legacy_objects'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/legacy.report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ), */
    // depricated instance of specific object report form
/*    'workflow_legacy/object/%' => array(
      'title' => t('Workflow Report | Status and Files'),
      'page callback' => array('upitt_workflow_legacy_objectreport_form'),
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/legacy.report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ), */

    'workflow/object/%/edit' => array(
      'title' => t('Edit Item'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_item_edit', 2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/item.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/object/%/islandora_ingest' => array(
      'title' => t('Islandora Ingest'),
      'page callback' => 'upitt_workflow_islandora_object_ingest',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/islandora_ingest.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    // handler to redirect when using the "look up an item by id" search box 
    'workflow/item/get' => array(
      'title' => t('Workflow Item'),
      'page callback' => array('upitt_workflow_redirect_item_get'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    // handler to redirect to batch when using "look up batch by id"
    'workflow/batch/get' => array(
      'title' => t('Workflow Batch'),
      'page callback' => array('upitt_workflow_redirect_batch_get'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/report.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batch/%' => array(
      'title' => t('Workflow Batch'),
      'page callback' => array('upitt_workflow_batch_detail_form'),
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/batch_detail.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batches/all' => array(
      'title' => t('All Batches'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_batches_form'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/batches.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batches/active' => array(
      'title' => t('Active Batches'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_batches_form'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/batches.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batch/%/islandora_ingest' => array(
      'title' => t('Islandora Ingest'),
      'page callback' => 'upitt_workflow_islandora_ingest',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/islandora_ingest.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batch/edit/%' => array(
      'title' => t('Edit Batch'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_new_batch_form', 3),
      'type' => MENU_CALLBACK,
      'file' => 'includes/batch.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/batch/new' => array(
      'title' => t('Create New Batch'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_new_batch_form'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/batch.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),
    'workflow/collection' => array(
      'title' => t('Workflow Collections (legacy)'), 
      'page callback' => array('upitt_workflow_collections_form'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/collections.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE),
    ),
    'workflow/collection/%' => array(
      'title' => t('Workflow Collections (legacy)'),
      'page callback' => 'upitt_workflow_collections_form',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/collections.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE),
    ),

    // ADMIN functions
    'workflow/workflowadmin/makebatch_from_workflow' => array(
      'title' => ('Create Batch Records From Barcodes'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_make_batchrecords_form'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/make_batchrecords_from_workflow.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
      'access callback' => 'upitt_workflow_workflowadmin_manage_access_callback',
    ),
    'workflow/workflowadmin' => array(
      'title' => t('Workflow Admin'),
      'page callback' => 'upitt_workflow_workflowadmin',
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'file' => 'includes/workflowadmin.form.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE_LOOKUPTABLES),
      'access callback' => 'upitt_workflow_workflowadmin_manage_access_callback',
    ),
    'workflow/workflowadmin/manage/%' => array(
      'title' => ('Manage Lookup Tables'),
      'page callback' => 'upitt_workflow_admin_manage',
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'file' => 'includes/admin_manage.form.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE_LOOKUPTABLES, 3),
      'access callback' => 'upitt_workflow_workflowadmin_manage_access_callback',
    ),
    'workflow/workflowadmin/manage/%/edit/%' => array(
      'title' => ('Edit Lookup Tables'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_admin_manage_edit', 3, 5),
      'type' => MENU_CALLBACK,
      'file' => 'includes/admin_manage.form.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE_LOOKUPTABLES, 3, 5),
      'access callback' => 'upitt_workflow_workflowadmin_manage_access_callback',
    ),
    // not certain about permissions on this one
    'workflow/status/change' => array(
      'title' => t('Status Change Form'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_workflow_status_change'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/status_change.form.inc',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES),
    ),

    // ADMIN functions for - Islandora Object Manage page
    'islandora/object/%islandora_object/manage/audit_upitt_workflow' => array(
      'title' => t('Audit'),
      'page callback' => 'upitt_workflow_object_manage_audit',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/audit_object.form.inc',
      'access arguments' => array(ISLANDORA_WORKFLOW_MANAGE),
      'access callback' => 'upitt_workflow_workflowadmin_manage_access_callback',
    ),
  );

  // special router to post values to the datastreams_io module
  if (module_exists('islandora_datastreams_io')) {
    $menu['workflow/datastreams_io/export/batch/%'] = array(
      'title' => t('Status Change Form'),
      'page callback' => 'upitt_workflow_datastreams_io_export',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'file' => 'includes/datastreams_export.inc',
      'access arguments' => user_access(ISLANDORA_DATASTREAMS_IO),
    );
  }

  return $menu;
}

/**
 * Implements hook_permission().
 */
function upitt_workflow_permission() {
  return array(
    ISLANDORA_WORKFLOW_MANAGE => array(
      'title' => t('Manage Islandora Workflow objects'),
      'description' => t('Manage Islandora Workflow objects - even batch status.'),
    ),
    ISLANDORA_WORKFLOW_MANAGE_LOOKUPTABLES => array(
      'title' => t('Manage Islandora Workflow Lookup Tables (such as the various pick list values, workflow sequences, etc)'),
      'description' => t('Manage Islandora Workflow lookup tables.'),
    ),
  );
}

function upitt_workflow_theme() {
  return array(
    'upitt_simple_markup' => array(
      'variables' => array('markup' => ''),
      'template' => 'theme/upitt-workflow-markup'),
    'upitt_workflow_report' => array(
      'variables' => array('table' => NULL, 'count_rows' => '', 'links' => '', 'collection_filter_choices' => '', 'details' => ''),
      'template' => 'theme/upitt-workflow-report',
    ),
    'upitt_workflow_report_with_detail_table' => array(
      'variables' => array('details' => NULL, 'files_table' => NULL, 'status_table', 'title' => '', 'links' => '', 'post_to' => ''),
      'template' => 'theme/upitt-workflow-report-with-detail-table',
    ),
    'workflow_item_details' => array(
      'variables' => array('details' => NULL, 'edit_item_link' => ''),
      'template' => 'theme/upitt-workflow-details',
    ),
    'upitt_workflow_batches' => array(
      'variables' => array('table' => NULL, 'links' => '', 'count_rows' => 0),
      'template' => 'theme/upitt-workflow-batches',
    ),
    'upitt_workflow_workflowadmin' => array(
      'variables' => array('links' => '', 'task_links' => '', 'breadcrumb' => '', 'markup' => ''),
      'template' => 'theme/upitt-workflow-workflowadmin',
    ),
    'upitt_workflow_collection_page' => array(
      'variables' => array('links' => '', 'breadcrumb' => '', 'table' => NULL, 'count_rows' => 0),
      'template' => 'theme/upitt-workflow-collection-page',
    ),
    'upitt_workflow_batchmove_report' => array(
      'variables' => array('markup' => '', 'breadcrumb' => ''),
      'render_element' => 'form',
      'template' => 'theme/upitt-workflow-batchmove-report',
    ),
/*
    'page__workflow_batch' => array(
      'template' => 'theme/page--workflow-batch',
      'variables' => array(
        'results' => NULL,
        'elements' => array(),
      ),
    ),
*/

  );
}

/**
 * Helper function to connect to the bigfoot database using the site's settings.php file.
 */
function upitt_workflow_get_databaselink($db_section = 'mysql') {
  global $databases;
  // Use the settings.php file for this install.
//  $script_base = str_replace('/index.php', '', $_SERVER['SCRIPT_FILENAME']);
//  require_once($script_base . '/' . conf_path(TRUE) . '/settings.php');
  $settings_file = variable_get('upitt_workflow_settings_file', '');
  if (!$settings_file) {
    drupal_set_message('The settings file value has not been set.  It is needed in order ' .
      'to be able to run the drush commands with the appropriate include path. ' .
      l('Configure Workflow here', 'admin/islandora/workflow') . '.');
    return NULL;
  }
  require_once($settings_file);

  module_load_include('inc', 'upitt_workflow', 'includes/utilities');

  if (count($databases) < 1 || !array_key_exists($db_section, $databases['default'])) {
    die('Database settings not found ' . $script_base . '/' . conf_path(TRUE) . '/settings.php');
  }

  $db_host = $databases['default'][$db_section]['host'];
  $db_user = $databases['default'][$db_section]['username'];
  $db_pass = $databases['default'][$db_section]['password'];
  $db_name = $databases['default'][$db_section]['database'];

  $link = mysqli_connect($db_host, $db_user, $db_pass, $db_name);
  //  if (!$link) {
  if (mysqli_connect_errno()) {
    // die('Not connected : ' . mysqli_error($link))
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
  }

  return $link;
}

/**
 * Implements hook_presprocess_theme().
 *
 * This code will remove the sidebar and must check to see whether or not the path is on a user page.
 */
function upitt_workflow_preprocess_page(&$vars) {
  $path = drupal_get_path('module', 'upitt_workflow');
  $item = menu_get_item();
  if (is_array($item)) {
    if ($item['path'] == 'workflow' ||
      (substr($item['path'], 0, 9) == 'workflow/')
//      (($item['path'] == 'node/%' || $item['path'] == 'node/%/edit') && (isset($vars['node'])))
      ) {

      $vars['page']['sidebar_first'] = array();
      $vars['page']['sidebar'] = array();
      drupal_add_css($path . '/style/workflow.css');

      if (isset($vars['node']) && $vars['node']->type == 'workflow_batch') {
        // If the node type is "blog_madness" the template suggestion will be "page--blog-madness.tpl.php".
        $vars['theme_hook_suggestions'][] = 'page__'. $vars['node']->type;
        dpm('page__'. $vars['node']->type . ' variables: ');
        dpm($vars);
      }
    }
    elseif ($item['path'] == 'islandora/object/%/manage/audit_upitt_workflow') {
      drupal_add_css($path . '/style/workflow.css');
    }
  }
}

/**
 * Handler for menu route "/workflow/item/get".  This simply redirects to the correct handler without the "q=" part.
 */
function upitt_workflow_redirect_item_get() {
  $q = isset($_POST['q']) ? $_POST['q'] : NULL;
  if ($q) {
    drupal_goto('/workflow/object/' . $q);
  }
}

/**
 * Handler for menu route "/workflow/batch/get".  This simply redirects to the correct handler without the "q=" part.
 */
function upitt_workflow_redirect_batch_get() {
  $q = isset($_POST['q']) ? $_POST['q'] : NULL;
  if ($q) {
    drupal_goto('/workflow/batch/' . $q);
  }
}

function upitt_workflow_workflowadmin_manage_access_callback($perm, $which_lookup_table = NULL) {
  global $user;
  module_load_include('inc', 'upitt_workflow', 'includes/utilities');

  if ($which_lookup_table) {
    // Only certain values are allowed for the $listname
    $allowed_listnames = upitt_workflow_get_allowed_listnames();
    if (!(array_search(strtolower($which_lookup_table), $allowed_listnames) === FALSE)) {
      return user_access($perm, $user);
    }
    else {
      if (user_access($perm, $user)) {
        drupal_set_message('Bad table name "' . $which_lookup_table . '"');
      }
      return FALSE;
    }
  }
  else {
    return user_access($perm, $user);
  }
}

/**
 * Implements hook_register_jobs().
 *
 * This will be triggered via the islandora_job/includes/utilites function islandora_job_start_worker($pidfile)
 */
function upitt_workflow_islandora_job_register_jobs() {
  $jobs = array(
    'islandora_job_test_job' => array(
      'type' => 'test',
      'module' => 'islandora_job',
      'name' => 'test/islandora_job',
    ),
  );
  return $jobs;
}

/** 
 * Used by various admin-level forms to return the manage table links.
 */
function upitt_workflow_get_listname_manage_links($listname) {
  module_load_include('inc', 'upitt_workflow', 'includes/utilities');

  $possible_listnames = upitt_workflow_get_allowed_listnames();
  foreach ($possible_listnames as $a_listname) {
    if (strtolower($listname) == $a_listname) {
      $links[] = '[' . $a_listname . ']';
    }
    else {
      $links[] = l($a_listname, '/workflow/workflowadmin/manage/' . $a_listname);
    }
  }
  return $links;
}

/**
 * Function used by various templates to display a trail of breadcrumbs.
 */
function upitt_workflow_get_breadcrumb_path() {
  // depending on current path, this is built
  $item = menu_get_item();
  if (is_array($item)) {
    $links = array();
    if (substr($item['path'], 0, 9) == 'workflow/') {
      $links[] = l(t('Workflow'), '/workflow');
    }
    if (substr($item['path'], 0, 16) == 'legacy_workflow/') {
      $links[] = l(t('Workflow (legacy)'), '/legacy_workflow');
    }
    if ($item['path'] == 'workflow/workflowadmin/manage/%' ||
      $item['path'] == 'workflow/batch/new' || $item['path'] == 'workflow/batch/edit/%'
      ) {
      $links[] = l(t('Workflow Admin'), '/workflow/workflowadmin');
    }
    if ($item['path'] == 'workflow/collection/%') {
      $links[] = l(t('Workflow Collections'), '/workflow/collection');
    }
    $links[] = $item['title'];
    return implode(' &raquo; ', $links);
  }
}

function upitt_workflow_filters_clause($in) {
  if (strstr($in, ',')) {
    $p = explode(",", str_replace(" ", "", $in));
    return '(\'' . implode("','",$p) . '\')';
  } else {
    return '(\'' . $in . '\')';
  }
}

/**
 * Implements hook_islandora_batch_process_finished().
 * 
 * The purpose of this drush is to provide code for (at least) the book batch
 * ingest which needs to subsequently call the aggregate PDF and OCR/HOCR to parent
 * drush commands during the hook provided for events after an item has been
 * processed: hook_islandora_batch_object_processed($ingest_object, $state)
 *
 *
 * Delete successfully ingested batch sets.
 */
function upitt_workflow_islandora_batch_process_finished($sets) {
  // Look at the object - and delete the related temporary files that were needed for this object.
  module_load_include('inc', 'upitt_workflow', 'includes/utilities');
  module_load_include('inc', 'islandora_paged_content', 'includes/derivatives');
  module_load_include('inc', 'islandora_batch', 'includes/db');

  my_log('in hook upitt_workflow_islandora_batch_process_finished - ready to delete files for object');
  //error_log('in hook upitt_workflow_islandora_batch_process_finished - ready to delete files for object' . "\n", 3, '/tmp/log');

  if (!empty($sets)) {
    module_load_include('inc', 'islandora_batch', 'includes/db');
    foreach ($sets as $set) {
      // Delete set and associated queued items.
      $queued_items = islandora_batch_get_queued_items_for_set($set);
      foreach ($queued_items as $ingested_pid) {
        $ingested_object = islandora_object_load($ingested_pid);

        my_log('object label = ' . $ingested_object->label . ' with PID ' . $ingested_object->id); 
        // error_log('object label = ' . $ingested_object->label . ' with PID ' . $ingested_object->id . "\n", 3, '/tmp/log');

        // See whether or not this is a paged-content object in order to call the
        // "aggregate PDF" and "aggregate OCR/HOCR" batch commands on it now.
        if (upitt_workflow_is_paged_object($ingested_object)) {
          upitt_workflow_aggregate_pdf_derivative($ingested_object);
          upitt_workflow_aggregate_ocr_derivative($ingested_object);
        }

        // Update the batch status record for the matching batch record for this set's $ingested_pid
        upitt_workflow_set_status_for_pid($ingested_object, UPITT_WORKFLOW_ACTION_INGESTED_COMPLETELY);
      }
    }
  }
}

/**
 * This function will aggregate the page's PDF files into a single PDF at the
 * book level.  Also, the page's PDF will be purged upon aggregation completion.
 *
 * This function will call a paged_content function to get the pages of a paged_content
 * object -- (in the order that they are arranged using the page sequenceNumber value.
 * These pages are then exported to files - and the filenames are passed on to
 * GhostScript in the order that they were sorted to generate the multi-paged
 * PDF file, and the pages IN THE ORDER that they are configured in the book.
 *
 * This must use standard tempnam() function because GhostScript shell command
 * does not interpret the //temporary: path from drupal's drupal_tempnam().
 */
function upitt_workflow_aggregate_pdf_derivative($islandora_object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  my_log('in upitt_workflow_aggregate_pdf_derivative');
  // error_log('in upitt_workflow_aggregate_pdf_derivative' . "\n", 3, '/tmp/log');

  if (islandora_paged_content_can_combine_pdf()) {
    $pages = islandora_paged_content_get_pages_ri($islandora_object);
    $pdf_files = upitt_workflow_pages_pdf_temp_files($pages);
    $consolidated_pdf_temp_file = tempnam("/tmp", "PDF_" . $islandora_object->id . ".txt");
    islandora_paged_content_pdf_combine($pdf_files, $consolidated_pdf_temp_file);

    module_load_include('inc', 'islandora_paged_content', 'includes/derivatives');
    islandora_paged_content_update_datastream($islandora_object, $consolidated_pdf_temp_file, 'PDF', 'PDF', 'application/pdf');

    @unlink($consolidated_pdf_temp_file);
    foreach ($pdf_files as $file) {
      my_log('delete temp file for pages PDF file "' . $file . '"');
      //  error_log('delete temp file for pages PDF file "' . $file . '"' . "\n", 3, '/tmp/log');
      @unlink($file);
    }
    upitt_workflow_purge_childpages_datastreams($islandora_object, $pages, 'PDF');
  }
}

function upitt_workflow_aggregate_ocr_derivative($islandora_object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  my_log('in upitt_workflow_aggregate_ocr_derivative');
  // error_log('in upitt_workflow_aggregate_ocr_derivative' . "\n", 3, '/tmp/log');

  $pages = islandora_paged_content_get_pages_ri($islandora_object);
  $ocr_files = upitt_workflow_pages_ocr_temp_files($pages);
  my_log('pages\' ocr files temp filenames ' . print_r($ocr_files, true));
  // error_log('pages\' ocr files temp filenames ' . print_r($ocr_files, true) . "\n", 3, '/tmp/log');
  $consolidated_ocr_temp_file = drupal_tempnam("temporary://", "OCR_" . $islandora_object->id . ".txt");
  islandora_paged_content_ocr_combine($ocr_files, $consolidated_ocr_temp_file);
  $f = file($consolidated_ocr_temp_file);
  my_log(implode("\n", $f));
  //  error_log(implode("\n", $f) . "\n", 3, '/tmp/log');

  module_load_include('inc', 'islandora_paged_content', 'includes/derivatives');
  islandora_paged_content_update_datastream($islandora_object, $consolidated_ocr_temp_file, 'OCR', 'Consolidated OCR', 'text/plain');

  @unlink($consolidated_ocr_temp_file);
  foreach ($ocr_files as $file) {
    my_log('delete temp file for pages ocr file "' . $file . '"');
    // error_log('delete temp file for pages ocr file "' . $file . '"' . "\n", 3, '/tmp/log');
    @unlink($file);
  }
  upitt_workflow_purge_childpages_datastreams($islandora_object, $pages, 'OCR');
}

/**
 * Returns a list of filenames to temporary files that are individual page OCR exports.
 */
function upitt_workflow_pages_ocr_temp_files($pages) {
  // for each page, export a temporary file of the OCR datastream
  $files = array();
  $page_pids = array_keys($pages);
  foreach ($page_pids as $page_pid) {
    $temp_name = drupal_tempnam("temporary://", "OCR_" . $page_pid . ".txt");
    $page_ocr = islandora_datastream_load('OCR', $page_pid);
    if (!is_null($page_ocr)) {
      file_put_contents($temp_name, $page_ocr->content, FILE_APPEND);
      $files[] = $temp_name;
    }
  }
  return $files;
}

/**
 * Returns a list of filenames to temporary files that are individual page PDF exports.
 */
function upitt_workflow_pages_pdf_temp_files($pages) {
  // for each page, export a temporary file of the PDF datastream
  $files = array();
  $page_pids = array_keys($pages);
  foreach ($page_pids as $page_pid) {
    $temp_name = tempnam("/tmp", "PDF_" . $page_pid . ".txt");
    $page_pdf = islandora_datastream_load('PDF', $page_pid);
    if (!is_null($page_pdf)) {
      file_put_contents($temp_name, $page_pdf->content, FILE_APPEND);
      $files[] = $temp_name;
    }
  }
  return $files;
}

/**
 * Helper function that will purge the datastreams from the child page objects - used
 * after PDF, or OCR datastreams have been aggregated successfully.  This will check for the 
 * datastream to exist on the parent object before deleting the child's datastreams.
 * 
 */
function upitt_workflow_purge_childpages_datastreams($islandora_object, $pages, $dsid) {
  // Remove the PDF datastreams for all child pages if the PDF has been aggregated
  if (isset($islandora_object[$dsid])) {
     my_log('in upitt_workflow_purge_childpages_datastreams for ' . $dsid . ' on ' . $islandora_object->id);
     // error_log('in upitt_workflow_purge_childpages_datastreams for ' . $dsid . ' on ' . $islandora_object->id . "\n", 3, '/tmp/log');

    foreach ($pages as $page) {
      $page_object = islandora_object_load($page['pid']);
      $datastream = @$page_object[$dsid];
      if ($datastream) {
        @$page_object->purgeDatastream($dsid);
      }
    }
  }
}

function my_log($string) {
  $date = date('H:i:s');
  error_log($date . ' ' . $string . "\n", 3, '/tmp/log');
}
